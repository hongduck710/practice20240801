-- 테이블 생성과 Dummy 데이터 생성
CREATE SEQUENCE SEQ_BOARD;

CREATE TABLE TBL_BOARD (
    BNO NUMBER(10,0),
    TITLE VARCHAR2(200) NOT NULL,
    CONTENT VARCHAR2(2000) NOT NULL,
    WRITER VARCHAR2(50) NOT NULL,
    REGDATE DATE DEFAULT SYSDATE,
    UPDATEDATE DATE DEFAULT SYSDATE
);

ALTER TABLE TBL_BOARD ADD CONSTRAINT PK_BOARD PRIMARY KEY(BNO);

INSERT INTO TBL_NOARD(BNO, TITLE, CONTENT, WRITER)
VALUES(SEQ_BOARD.NEXTVAL, '텍스트 제목', '텍스트 내용', 'USER00');

-- 재귀 복사를 통해서 테이터의 갯수 늘림. 
INSERT INTO TBL_BOARD(BNO, TITLE, CONTENT, WRITER)
(SELECT SEQ_BOARD.NEXVAL, TITLE, CONTENT, WRITER FROM TBL_BOARD);

-- 댓글 처리를 위한 영속 영역
CREATE TABLE TBL_REPLY (
    RNO NUMBER(10, 0),
    BNO NUMBER(10, 0) NOT NULL,
    REPLY VARCHAR2(1000) NOT NULL,
    REPLYER VARCHAR2(50) NOT NULL,
    REPLYDATE DATE DEFAULT SYSDATE,
    UPDATEDATE DATE DEFAULT SYSDATE
);

CREATE SEQUENCE SQL_REPLY;

ALTER TABLE TBL_REPLY ADD CONSTRAINT PK_REPLY PRIMARY KEY(RNO);

ALTER TABLE TBL_REPLY ADD CONSTRAINT FK_REPLY_BOARD
FOREIGN KEY(BNO) REFERENCES TBL_BOARD(BNO);

-- 첨부파일 정보를 위한 준비
CREATE TABLE TBL_ATTACH (
    UUID VARCHAR2(100) NOT NULL,
    UPLOADPATH VARCHAR2(200) NOT NULL,
    FILENAME VARCHAR2(100) NOT NULL,
    FILETYPE CHAR(1) DEFAULT 'I',
    BNO NUMBER(10,0)
);

ALTER TABLE TBL_ATTACH ADD CONSTRAINT PK_ATTACH PRIMARY KEY(UUID);
ALTER TABLE TBL_ATTACH ADD CONSTRAINT FK_BOARD_ATTACH FOREIGN KEY(BNO)
REFERENCES TBL_BOARD(BNO);

CREATE TABLE USERS(
    USERNAME VARCHAR2(50) NOT NULL PRIMARY KEY,
    PASSWORD VARCHAR2(50) NOT NULL,
    ENABLED CHAR(1) DEFAULT '1'
);

CREATE TABLE AUTHORITIES(
    USERNAME VARCHAR2(50) NOT NULL,
    AUTHORITY VARCHAR2(50) NOT NULL,
    CONSTRAINT FK_AUTHORITIES_USERS FOREIGN KEY(USERNAME) 
    REFERENCES USERS(USERNAME)
);

CREATE UNIQUE INDEX IX_AUTH_USERNAME ON AUTHORITIES(USERNAME, AUTHORITY);

INSERT INTO USERS (USERNAME, PASSWORD) VALUES('user00', 'user00');
INSERT INTO USERS (USERNAME, PASSWORD) VALUES('commi', 'commi');
INSERT INTO USERS (USERNAME, PASSWORD) VALUES('member00', 'member00');
INSERT INTO USERS (USERNAME, PASSWORD) VALUES('admin00', 'admin00');

INSERT INTO AUTHORITIES (USERNAME, AUTHORITY) VALUES('user00','ROLE_USER');
INSERT INTO AUTHORITIES (USERNAME, AUTHORITY) VALUES('commi','ROLE_USER');
INSERT INTO AUTHORITIES (USERNAME, AUTHORITY) VALUES('member00', 'ROLE_MANAGER');
INSERT INTO AUTHORITIES (USERNAME, AUTHORITY) VALUES('admin00', 'ROLE_MANAGER');
INSERT INTO AUTHORITIES (USERNAME, AUTHORITY) VALUES('admin00', 'ROLE_ADMIN');
COMMIT;

-- 인증 / 권한을 위한 테이블 설계
CREATE TABLE TBL_MEMBER (
    USERID VARCHAR2(50) NOT NULL PRIMARY KEY,
    USERPW VARCHAR2(100) NOT NULL,
    USERNAME VARCHAR2(100) NOT NULL,
    REGDATE DATE DEFAULT SYSDATE,
    UPDATEDATE DATE DEFAULT SYSDATE,
    ENABLED CHAR(1) DEFAULT '1'
);

CREATE TABLE TBL_MEMBER_AUTH (
    USERID VARCHAR2(50) NOT NULL,
    AUTH VARCHAR2(50) NOT NULL,
    CONSTRAINT FK_MEMBER_AUTH FOREIGN KEY(USERID) 
    REFERENCES TBL_MEMBER(USERID)
);

-- 데이터베이스를 이용하는 자동 로그인
CREATE TABLE PERSISTENT_LOGINS(
    USERNAME VARCHAR(64) NOT NULL,
    SERIES VARCHAR(64) PRIMARY KEY,
    TOKEN VARCHAR(64) NOT NULL,
    LAST_USED TIMESTAMP NOT NULL
);
SELECT * FROM PERSISTENT_LOGINS;
